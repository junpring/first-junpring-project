<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTO Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="dev.junpring.scribble.mappers.IBoardMapper">
    <!-- 게시글 검색 -->
    <sql id="search">
        <!-- 검색 키워드가 있을 때 -->
        <if test="keyword != null and keyword != ''">
            <choose>
                <!-- 검색 유형이 있을 때 -->
                <when test="searchType != null and searchType != ''">
                    <choose>
                        <when test="'title'.equals( searchType )">
                            AND `title` LIKE CONCAT('%', #{keyword}, '%')
                        </when>
                        <when test="'content'.equals( searchType )">
                            AND `content` LIKE CONCAT('%', #{keyword}, '%')
                        </when>
                    </choose>
                </when>
                <!-- 전체 검색일 때 때 -->
                <otherwise>
                    AND (
                    `title` LIKE CONCAT('%', #{keyword}, '%')
                    OR `content` LIKE CONCAT('%', #{keyword}, '%'))
                </otherwise>
            </choose>
        </if>
    </sql>


    <delete id="deleteArticleList">
        DELETE
        FROM `scribble_board`.`articles`
        WHERE id = #{id}
        LIMIT 1
    </delete>

    <insert id="insertArticleList"
            useGeneratedKeys="true"
            keyColumn="id"
            keyProperty="id"
            parameterType="dev.junpring.scribble.entities.board.ArticleEntity">
        INSERT INTO `scribble_board`.`articles`(`board_code`, `user_id`, `title`, `content`, `view`)
        VALUES (#{boardCode}, #{userId}, #{title}, #{content}, #{view})
    </insert>

    <insert id="insertImage"
            parameterType="dev.junpring.scribble.entities.board.ImageEntity">
        INSERT INTO `scribble_board`.`images`(`id`, `create_at`, `file_name`, `file_type`, `data`)
        VALUES (#{id}, #{createAt}, #{fileName}, #{fileType}, #{data})
    </insert>


    <select id="selectImage"
            resultType="dev.junpring.scribble.entities.board.ImageEntity">
        SELECT `id`        AS `id`,
               `create_at` AS `createAt`,
               `file_name` AS `fileName`,
               `file_type` AS `fileType`,
               `data`      AS `data`
        FROM `scribble_board`.`images`
        WHERE `id` = #{id}
        LIMIT 1
    </select>

    <select id="selectForPrintArticle"
            resultType="dev.junpring.scribble.entities.board.ArticleEntity"
            resultMap="article">
        SELECT `A`.`id`                     AS `id`,
               `A`.`title`                  AS `title`,
               `A`.`content`                AS `content`,
               `A`.`board_code`             AS `boardCode`,
               `A`.`user_id`                AS `userId`,
               `A`.`like`                   AS `like`,
               `A`.`reply_count`            AS `replyCount`,
               `A`.`view`                   AS `view`,
               `A`.`written_at`             AS `writtenAt`,
               `B`.`name`                   AS `extra__boardCodeName`,
               `U`.`nickname`               AS `extra__userWriter`,
               IFNULL(SUM(`AL`.`point`), 0) AS `extra__like`
        FROM `scribble_board`.`articles` AS `A`
                 LEFT JOIN `scribble_board`.`boards` AS `B`
                           ON `A`.`board_code` = b.`code`
                 LEFT JOIN `scribble_member`.`user` AS `U`
                           ON `A`.`user_id` = `U`.`id`
                 LEFT JOIN `scribble_board`.`article_like` AS `AL`
                           ON `A`.`id` = `AL`.`article_id`
        WHERE `A`.`id` = #{id}
    </select>

    <!--    IFNULL(SUM(`AL`.`point`), 0) AS `extra__like`-->

    <select id="selectArticlesCount"
            parameterType="dev.junpring.scribble.dtos.SearchDto"
            resultType="_int">
        SELECT COUNT(*)
        FROM `scribble_board`.`articles` AS `A`
        INNER JOIN `scribble_board`.`boards` AS `B`
        ON `A`.`board_code` = `B`.`code`
        WHERE B.id = #{boardCode}
        <include refid="search"/>
    </select>
    <select id="selectArticlesForBoardList"
            resultType="dev.junpring.scribble.entities.board.ArticleEntity">
        SELECT `A`.`id` AS `id`,
        `A`.`board_code` AS `boardCode`,
        `A`.`user_id` AS `userId`,
        `A`.`title` AS `title`,
        `A`.`content` AS `content`,
        `A`.`like` AS `like`,
        `A`.`reply_count` AS `replyCount`,
        `A`.`view` AS `view`,
        `A`.`written_at` AS `writtenAt`
        FROM `scribble_board`.`articles` AS `A`
        INNER JOIN `scribble_board`.`boards` AS `B`
        ON `A`.`board_code` = `B`.`code`
        WHERE `board_code` = #{boardCode}
        <include refid="search"/>
        ORDER BY id DESC
        LIMIT #{paginationVo.limitStart}, #{recordSize}
    </select>

    <select id="selectRootArticleList"
            parameterType="dev.junpring.scribble.entities.board.BoardEntity"
            resultType="dev.junpring.scribble.vos.board.article.ArticleListVo">
        SELECT `B`.`id`        AS `id`,
               `code`          AS `boardCode`,
               `articles`.`id` AS `articleId`,
               `user_id`       AS `userId`,
               `title`         AS `title`,
               `content`       AS `content`,
               `like`          AS `like`,
               `reply_count`   AS `replyCount`,
               `view`          AS `view`,
               `written_at`    AS `writtenAt`
        FROM `scribble_board`.`articles`
                 LEFT JOIN `scribble_board`.`boards` AS `B` ON `articles`.`board_code` = `B`.`code`
        WHERE `B`.id = #{id}
        ORDER BY `articles`.`id` DESC
        LIMIT 5
    </select>

    <select id="selectArticle" resultMap="article">
        SELECT `A`.`id`         AS `id`,
               `A`.`written_at` AS `writtenAt`,
               `A`.`title`      AS `title`,
               `A`.`content`    AS `content`,
               `A`.`user_id`    AS `userId`,
               `A`.`like`       AS `like`,
               `A`.`view`       AS `view`
        FROM `scribble_board`.`articles` AS `A`
        WHERE `A`.`id` = #{id}
    </select>

    <select id="selectBoardByCode"
            parameterType="dev.junpring.scribble.entities.board.BoardEntity"
            resultType="dev.junpring.scribble.entities.board.BoardEntity">
        SELECT `id`          AS `id`,
               `code`        AS `code`,
               `name`        AS `name`,
               `list_level`  AS `listLevel`,
               `read_level`  AS `readLevel`,
               `write_level` AS `writeLevel`,
               reply_level   AS `commentLevel`
        FROM `scribble_board`.`boards`
        WHERE `code` = #{code}
        LIMIT 1
    </select>

    <select id="selectBoardCode"
            parameterType="dev.junpring.scribble.entities.board.BoardEntity"
            resultType="dev.junpring.scribble.entities.board.BoardEntity">
        SELECT `id`          AS `id`,
               `code`        AS `code`,
               `name`        AS `name`,
               `list_level`  AS `listLevel`,
               `read_level`  AS `readLevel`,
               `write_level` AS `writeLevel`,
               reply_level   AS `commentLevel`
        FROM `scribble_board`.`boards`
    </select>

    <update id="updateArticle"
            parameterType="dev.junpring.scribble.entities.board.ArticleEntity">
        UPDATE `scribble_board`.`articles`
        SET `title`   = #{title},
            `content` = #{content}
        WHERE `id` = #{id}
          AND `user_id` = #{userId}
        LIMIT 1
    </update>

    <update id="updateViewCount">
        UPDATE `scribble_board`.`articles`
        SET `view` = `view` + 1
        WHERE id = #{id}
    </update>

    <delete id="deleteCommentList">
        DELETE
        FROM `scribble_board`.`reply`
        WHERE id = #{id}
        LIMIT 1
    </delete>

    <insert id="writeArticleReply"
            useGeneratedKeys="true"
            keyColumn="id"
            keyProperty="id"
            parameterType="dev.junpring.scribble.dtos.ArticleReplyDTO">
        INSERT INTO `scribble_board`.`reply`
        SET `id`         = #{id},
            `content`    = #{content},
            `user_id`    = #{userId},
            `article_id` = #{articleId}
    </insert>

    <select id="getForPrintArticleRepliesFrom" resultMap="articleReply">
        SELECT `AR`.`id`         AS `id`,
               `AR`.`written_at` AS `writtenAt`,
               `AR`.`content`    AS `content`,
               `AR`.`user_id`    AS `userId`,
               `U`.`nickname`    AS `extra__userWriter`,
               `U`.`email`       AS `extra__userEmail`
        FROM `scribble_board`.`reply` AS `AR`
                 INNER JOIN `scribble_member`.`user` AS `U`
                            ON `AR`.`user_id` = `U`.`id`
        WHERE `AR`.`article_id` = #{articleId}
        ORDER BY `AR`.`id` DESC
    </select>

    <select id="selectArticleReply" resultMap="articleReply">
        SELECT `AR`.`id`         AS `id`,
               `AR`.`written_at` AS `writtenAt`,
               `AR`.`content`    AS `content`,
               `AR`.`user_id`    AS `userId`
        FROM `scribble_board`.`reply` AS `AR`
        WHERE `AR`.`id` = #{id}
    </select>

    <update id="updateArticleReply"
            parameterType="dev.junpring.scribble.dtos.ArticleReplyDTO">
        UPDATE scribble_board.reply
        <set>
            <if test="content != null">content = #{content}</if>
        </set>
        WHERE id = #{id}
    </update>

    <delete id="deleteArticleReply">
        DELETE
        FROM `scribble_board`.`reply`
        WHERE id = #{id}
        LIMIT 1
    </delete>

    <insert id="insertLikeArticle">
        INSERT INTO `scribble_board`.`article_like`
        SET `reg_date`   = NOW(),
            `article_id` = #{id},
            `user_id`    = #{userId},
            `point`      = 1
    </insert>

    <select id="selectLikePointByUserId" resultType="_int">
        SELECT IFNULL(SUM(`AL`.`point`), 0) AS `point`
        FROM `scribble_board`.`article_like` AS `AL`
        WHERE `AL`.`article_id` = #{id}
          AND AL.`user_id` = #{userId}
    </select>

    <select id="selectLikePoint" resultType="_int">
        SELECT IFNULL(SUM(`AL`.`point`), 0) AS `point`
        FROM `scribble_board`.`article_like` AS `AL`
        WHERE `AL`.`article_id` = #{id}
    </select>

    <delete id="deleteCancelLikeArticle">
        DELETE
        FROM `scribble_board`.`article_like`
        WHERE `article_id` = #{id}
          AND user_id = #{userId}
    </delete>

    <resultMap type="dev.junpring.scribble.entities.board.ArticleEntity"
               id="article">
        <result property="id" column="id"/>
        <result property="title" column="title"/>
        <result property="content" column="content"/>
        <result property="boardCode" column="boardCode"/>
        <result property="userId" column="userId"/>
        <result property="like" column="like"/>
        <result property="replyCount" column="replyCount"/>
        <result property="view" column="view"/>
        <result property="writtenAt" column="writtenAt"/>
        <result property="view" column="view"/>
        <association property="extra" javaType="map">
            <result property="boardCodeName" column="extra__boardCodeName"/>
            <result property="userWriter" column="extra__userWriter"/>
            <result property="likePoint" column="extra__like"/>
        </association>
    </resultMap>

    <resultMap type="dev.junpring.scribble.dtos.ArticleReplyDTO"
               id="articleReply">
        <result property="id" column="id"/>
        <result property="writtenAt" column="writtenAt"/>
        <result property="content" column="content"/>
        <result property="userId" column="userId"/>
        <result property="articleId" column="articleId"/>
        <association property="extra" javaType="map">
            <result property="userWriter" column="extra__userWriter"/>
            <result property="userEmail" column="extra__userEmail"/>
        </association>
    </resultMap>
</mapper>